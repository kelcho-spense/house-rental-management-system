generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TENANT
}

enum PropertyType {
  HOUSE
  APARTMENT
  CONDO
  TOWNHOUSE
  STUDIO
  DUPLEX
  OTHER
}

enum PaymentMethod {
  PAYPAL
  STRIPE
  MPESA
  BANK_TRANSFER
  CASH
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum MaintenanceStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum LeaseStatus {
  ACTIVE
  EXPIRED
  TERMINATED
}

enum TenantStatus {
  ACTIVE
  INACTIVE
}

enum CommunicationType {
  MESSAGE
  NOTIFICATION
  EMAIL
  SMS
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum CalendarProvider {
  GOOGLE
  OUTLOOK
  APPLE
  YAHOO
  OTHER
}

model User {
  id           Int      @id @default(autoincrement())
  fullName     String
  email        String   @unique
  passwordHash String
  role         Role
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  tenant           Tenant?
  messagesSent     Message[]      @relation("MessagesSent")
  messagesReceived Message[]      @relation("MessagesReceived")
  notifications    Notification[]
  reports          Report[]
  calendarSyncs    CalendarSync[]

  @@index([role])
  @@index([createdAt])
}

model Tenant {
  id          Int          @id @default(autoincrement())
  phoneNumber String
  address     String
  status      TenantStatus @default(ACTIVE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  user                User                 @relation(fields: [userId], references: [id])
  userId              Int                  @unique
  leaseAgreements     LeaseAgreement[]
  rentalPayments      RentalPayment[]
  maintenanceRequests MaintenanceRequest[]
  appointments        Appointment[]
}

model Property {
  id           Int          @id @default(autoincrement())
  title        String
  description  String
  type         PropertyType
  size         Float
  location     String
  price        Float
  availability Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  images              Image[]
  videos              Video[]
  leaseAgreements     LeaseAgreement[]
  maintenanceRequests MaintenanceRequest[]
  appointments        Appointment[]

  @@index([type])
  @@index([location])
  @@index([price])
  @@index([availability])
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())

  // Relations
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int
}

model Video {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())

  // Relations
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int
}

model LeaseAgreement {
  id        Int         @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  status    LeaseStatus
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  tenant        Tenant          @relation(fields: [tenantId], references: [id])
  tenantId      Int
  property      Property        @relation(fields: [propertyId], references: [id])
  propertyId    Int
  documents     Document[]
  rentalPayments RentalPayment[]
}

model RentalPayment {
  id               Int            @id @default(autoincrement())
  amount           Float
  method           PaymentMethod
  status           PaymentStatus  @default(PENDING)
  invoice          String // URL or identifier for invoice
  receipt          String? // URL or identifier for receipt
  dueDate          DateTime
  paymentDate      DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  tenant           Tenant         @relation(fields: [tenantId], references: [id])
  tenantId         Int
  leaseAgreement   LeaseAgreement @relation(fields: [leaseAgreementId], references: [id])
  leaseAgreementId Int

  @@index([status])
  @@index([dueDate])
  @@index([tenantId, status])
}

model MaintenanceRequest {
  id            Int               @id @default(autoincrement())
  description   String
  status        MaintenanceStatus @default(OPEN)
  scheduledDate DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relations
  tenant        Tenant            @relation(fields: [tenantId], references: [id])
  tenantId      Int
  property      Property          @relation(fields: [propertyId], references: [id])
  propertyId    Int
  assignedTo    Contractor?       @relation(fields: [contractorId], references: [id])
  contractorId  Int?
  documents     Document[]

  @@index([status])
  @@index([scheduledDate])
  @@index([tenantId, status])
}

model Contractor {
  id                  Int                  @id @default(autoincrement())
  name                String
  contactInformation  String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  // Relations
  maintenanceRequests MaintenanceRequest[]
}

enum DocumentType {
  LEASE
  CONTRACT
  OTHER
}

model Document {
  id                   Int                 @id @default(autoincrement())
  name                 String
  url                  String
  type                 DocumentType
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt

  // Relations
  leaseAgreement       LeaseAgreement?     @relation(fields: [leaseAgreementId], references: [id])
  leaseAgreementId     Int?
  maintenanceRequest   MaintenanceRequest? @relation(fields: [maintenanceRequestId], references: [id])
  maintenanceRequestId Int?
}

model Message {
  id         Int               @id @default(autoincrement())
  content    String
  type       CommunicationType
  read       Boolean           @default(false)
  createdAt  DateTime          @default(now())

  // Relations
  sender     User              @relation("MessagesSent", fields: [senderId], references: [id])
  senderId   Int
  receiver   User              @relation("MessagesReceived", fields: [receiverId], references: [id])
  receiverId Int

  @@index([senderId, receiverId])
  @@index([createdAt])
  @@index([read])
}

model Notification {
  id        Int               @id @default(autoincrement())
  type      CommunicationType
  message   String
  read      Boolean           @default(false)
  createdAt DateTime          @default(now())

  // Relations
  user      User              @relation(fields: [userId], references: [id])
  userId    Int

  @@index([userId, read])
  @@index([createdAt])
}

model Appointment {
  id            Int      @id @default(autoincrement())
  scheduledTime DateTime
  status        AppointmentStatus
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  property      Property @relation(fields: [propertyId], references: [id])
  propertyId    Int
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  tenantId      Int

  @@index([scheduledTime])
  @@index([status])
  @@index([tenantId, status])
}

model Report {
  id            Int      @id @default(autoincrement())
  title         String
  description   String
  data          Json
  createdAt     DateTime @default(now())

  // Relations
  generatedBy   User     @relation(fields: [generatedById], references: [id])
  generatedById Int
}

model CalendarSync {
  id           Int       @id @default(autoincrement())
  provider     CalendarProvider
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
}
