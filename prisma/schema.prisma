generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TENANT
  LANDLORD
  AGENT
}

enum PropertyType {
  HOUSE
  APARTMENT
  CONDO
  TOWNHOUSE
  STUDIO
  DUPLEX
  OTHER
}

enum PaymentMethod {
  PAYPAL
  STRIPE
  MPESA
  BANK_TRANSFER
  CASH
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum MaintenanceStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum LeaseStatus {
  ACTIVE
  EXPIRED
  TERMINATED
}

enum TenantStatus {
  ACTIVE
  INACTIVE
}

enum CommunicationType {
  MESSAGE
  NOTIFICATION
  EMAIL
  SMS
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum CalendarProvider {
  GOOGLE
  OUTLOOK
  APPLE
  YAHOO
  OTHER
}

// User model
model User {
  userId             Int            @id @default(autoincrement()) // Changed from id
  fullName           String
  email              String         @unique
  passwordHash       String
  role               UserRole
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  access_token_hash  String?
  refresh_token_hash String?
  // Relations
  tenant             Tenant?
  messagesSent       Message[]      @relation("MessagesSent")
  messagesReceived   Message[]      @relation("MessagesReceived")
  notifications      Notification[]
  reports            Report[]
  calendarSyncs      CalendarSync[]

  @@index([role])
  @@index([createdAt])
}

model Tenant {
  tenantId    Int          @id @default(autoincrement()) // Changed from id
  phoneNumber String
  address     String
  status      TenantStatus @default(ACTIVE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  user                User                 @relation(fields: [userId], references: [userId])
  userId              Int                  @unique
  leaseAgreements     LeaseAgreement[]
  rentalPayments      RentalPayment[]
  maintenanceRequests MaintenanceRequest[]
  appointments        Appointment[]
}

model Property {
  propertyId   Int          @id @default(autoincrement()) // Changed from id
  title        String
  description  String
  type         PropertyType
  size         Float
  location     String
  price        Float
  availability Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  images              Image[]
  videos              Video[]
  leaseAgreements     LeaseAgreement[]
  maintenanceRequests MaintenanceRequest[]
  appointments        Appointment[]

  @@index([type])
  @@index([location])
  @@index([price])
  @@index([availability])
}

model Image {
  imageId   Int      @id @default(autoincrement()) // Changed from id
  url       String
  createdAt DateTime @default(now())

  // Relations
  property   Property @relation(fields: [propertyId], references: [propertyId])
  propertyId Int
}

model Video {
  videoId   Int      @id @default(autoincrement()) // Changed from id
  url       String
  createdAt DateTime @default(now())

  // Relations
  property   Property @relation(fields: [propertyId], references: [propertyId])
  propertyId Int
}

model LeaseAgreement {
  leaseAgreementId Int         @id @default(autoincrement()) // Changed from id
  startDate        DateTime
  endDate          DateTime
  status           LeaseStatus
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Relations
  tenant         Tenant          @relation(fields: [tenantId], references: [tenantId])
  tenantId       Int
  property       Property        @relation(fields: [propertyId], references: [propertyId])
  propertyId     Int
  documents      Document[]
  rentalPayments RentalPayment[]
}

model RentalPayment {
  rentalPaymentId Int           @id @default(autoincrement()) // Changed from id
  amount          Float
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  invoice         String // URL or identifier for invoice
  receipt         String? // URL or identifier for receipt
  dueDate         DateTime
  paymentDate     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  tenant           Tenant         @relation(fields: [tenantId], references: [tenantId])
  tenantId         Int
  leaseAgreement   LeaseAgreement @relation(fields: [leaseAgreementId], references: [leaseAgreementId])
  leaseAgreementId Int

  @@index([status])
  @@index([dueDate])
  @@index([tenantId, status])
}

model MaintenanceRequest {
  maintenanceRequestId Int               @id @default(autoincrement()) // Changed from id
  description          String
  status               MaintenanceStatus @default(OPEN)
  scheduledDate        DateTime?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  // Relations
  tenant       Tenant      @relation(fields: [tenantId], references: [tenantId])
  tenantId     Int
  property     Property    @relation(fields: [propertyId], references: [propertyId])
  propertyId   Int
  assignedTo   Contractor? @relation(fields: [contractorId], references: [contractorId])
  contractorId Int?
  documents    Document[]

  @@index([status])
  @@index([scheduledDate])
  @@index([tenantId, status])
}

model Contractor {
  contractorId       Int      @id @default(autoincrement()) // Changed from id
  name               String
  contactInformation String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  maintenanceRequests MaintenanceRequest[]
}

enum DocumentType {
  LEASE
  CONTRACT
  OTHER
}

model Document {
  documentId Int          @id @default(autoincrement()) // Changed from id
  name       String
  url        String
  type       DocumentType
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  // Relations
  leaseAgreement       LeaseAgreement?     @relation(fields: [leaseAgreementId], references: [leaseAgreementId])
  leaseAgreementId     Int?
  maintenanceRequest   MaintenanceRequest? @relation(fields: [maintenanceRequestId], references: [maintenanceRequestId])
  maintenanceRequestId Int?
}

model Message {
  messageId Int               @id @default(autoincrement()) // Changed from id
  content   String
  type      CommunicationType
  read      Boolean           @default(false)
  createdAt DateTime          @default(now())

  // Relations
  sender     User @relation("MessagesSent", fields: [senderId], references: [userId])
  senderId   Int
  receiver   User @relation("MessagesReceived", fields: [receiverId], references: [userId])
  receiverId Int

  @@index([senderId, receiverId])
  @@index([createdAt])
  @@index([read])
}

model Notification {
  notificationId Int               @id @default(autoincrement()) // Changed from id
  type           CommunicationType
  message        String
  read           Boolean           @default(false)
  createdAt      DateTime          @default(now())

  // Relations
  user   User @relation(fields: [userId], references: [userId])
  userId Int

  @@index([userId, read])
  @@index([createdAt])
}

model Appointment {
  appointmentId Int               @id @default(autoincrement()) // Changed from id
  scheduledTime DateTime
  status        AppointmentStatus
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relations
  property   Property @relation(fields: [propertyId], references: [propertyId])
  propertyId Int
  tenant     Tenant   @relation(fields: [tenantId], references: [tenantId])
  tenantId   Int

  @@index([scheduledTime])
  @@index([status])
  @@index([tenantId, status])
}

model Report {
  reportId    Int      @id @default(autoincrement()) // Changed from id
  title       String
  description String
  data        Json
  createdAt   DateTime @default(now())

  // Relations
  generatedBy   User @relation(fields: [generatedById], references: [userId])
  generatedById Int
}

model CalendarSync {
  calendarSyncId Int              @id @default(autoincrement()) // Changed from id
  provider       CalendarProvider
  accessToken    String
  refreshToken   String?
  expiresAt      DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relations
  user   User @relation(fields: [userId], references: [userId])
  userId Int
}
