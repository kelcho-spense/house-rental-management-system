generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TENANT
}

enum PropertyType {
  HOUSE
  APARTMENT
  CONDO
  TOWNHOUSE
  STUDIO
  DUPLEX
  OTHER
}

enum PaymentMethod {
  PAYPAL
  STRIPE
  MPESA
  BANK_TRANSFER
  CASH
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum MaintenanceStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum LeaseStatus {
  ACTIVE
  EXPIRED
  TERMINATED
}

enum TenantStatus {
  ACTIVE
  INACTIVE
}

enum CommunicationType {
  MESSAGE
  NOTIFICATION
  EMAIL
  SMS
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum CalendarProvider {
  GOOGLE
  OUTLOOK
  APPLE
  YAHOO
  OTHER
}

model User {
  id               Int            @id @default(autoincrement())
  name             String
  email            String         @unique
  password         String
  role             Role
  tenant           Tenant?
  messagesSent     Message[]      @relation("MessagesSent")
  messagesReceived Message[]      @relation("MessagesReceived")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  Notification     Notification[]
  Report           Report[]
  CalendarSync     CalendarSync[]

  @@index([role]) // Index for role-based queries
  @@index([createdAt]) // Index for user listing by creation date
}

model Tenant {
  id                  Int                  @id @default(autoincrement())
  user                User                 @relation(fields: [userId], references: [id])
  userId              Int                  @unique
  phoneNumber         String
  address             String
  leaseAgreements     LeaseAgreement[]
  rentalPayments      RentalPayment[]
  maintenanceRequests MaintenanceRequest[]
  status              TenantStatus         @default(ACTIVE)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  Appointment         Appointment[]
}

model Property {
  id                  Int                  @id @default(autoincrement())
  title               String
  description         String
  type                PropertyType
  size                Float // e.g., in square meters
  location            String
  price               Float // Rental price
  availability        Boolean              @default(true)
  images              Image[]
  videos              Video[]
  leaseAgreements     LeaseAgreement[]
  maintenanceRequests MaintenanceRequest[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  Appointment         Appointment[]

  @@index([type]) // Index for filtering by property type
  @@index([location]) // Index for location-based searches
  @@index([price]) // Index for price-based filtering
  @@index([availability]) // Index for availability filtering
}

model Image {
  id         Int      @id @default(autoincrement())
  url        String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int
  createdAt  DateTime @default(now())
}

model Video {
  id         Int      @id @default(autoincrement())
  url        String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int
  createdAt  DateTime @default(now())
}

model LeaseAgreement {
  id            Int             @id @default(autoincrement())
  tenant        Tenant          @relation(fields: [tenantId], references: [id])
  tenantId      Int
  property      Property        @relation(fields: [propertyId], references: [id])
  propertyId    Int
  startDate     DateTime
  endDate       DateTime
  status        LeaseStatus
  documents     Document[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  RentalPayment RentalPayment[]
}

model RentalPayment {
  id               Int            @id @default(autoincrement())
  tenant           Tenant         @relation(fields: [tenantId], references: [id])
  tenantId         Int
  amount           Float
  method           PaymentMethod
  status           PaymentStatus  @default(PENDING)
  invoice          String // URL or identifier for invoice
  receipt          String? // URL or identifier for receipt
  dueDate          DateTime
  paymentDate      DateTime?
  leaseAgreement   LeaseAgreement @relation(fields: [leaseAgreementId], references: [id])
  leaseAgreementId Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([status]) // Index for payment status queries
  @@index([dueDate]) // Index for due date queries
  @@index([tenantId, status]) // Composite index for tenant's payments with status
}

model MaintenanceRequest {
  id            Int               @id @default(autoincrement())
  tenant        Tenant            @relation(fields: [tenantId], references: [id])
  tenantId      Int
  property      Property          @relation(fields: [propertyId], references: [id])
  propertyId    Int
  description   String
  status        MaintenanceStatus @default(OPEN)
  assignedTo    Contractor?       @relation(fields: [contractorId], references: [id])
  contractorId  Int?
  scheduledDate DateTime?
  documents     Document[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([status]) // Index for filtering by status
  @@index([scheduledDate]) // Index for date-based queries
  @@index([tenantId, status]) // Composite index for tenant's requests with status
}

model Contractor {
  id                  Int                  @id @default(autoincrement())
  name                String
  contactInformation  String
  maintenanceRequests MaintenanceRequest[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

enum DocumentType {
  LEASE
  CONTRACT
  OTHER
}

model Document {
  id                   Int                 @id @default(autoincrement())
  name                 String
  url                  String
  type                 DocumentType // e.g., lease, contract, etc.
  leaseAgreement       LeaseAgreement?     @relation(fields: [leaseAgreementId], references: [id])
  leaseAgreementId     Int?
  maintenanceRequest   MaintenanceRequest? @relation(fields: [maintenanceRequestId], references: [id])
  maintenanceRequestId Int?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model Message {
  id         Int               @id @default(autoincrement())
  sender     User              @relation("MessagesSent", fields: [senderId], references: [id])
  senderId   Int
  receiver   User              @relation("MessagesReceived", fields: [receiverId], references: [id])
  receiverId Int
  content    String
  type       CommunicationType
  read       Boolean           @default(false)
  createdAt  DateTime          @default(now())

  @@index([senderId, receiverId]) // Index for conversation queries
  @@index([createdAt]) // Index for message history
  @@index([read]) // Index for unread messages queries
}

model Notification {
  id        Int               @id @default(autoincrement())
  user      User              @relation(fields: [userId], references: [id])
  userId    Int
  type      CommunicationType
  message   String
  read      Boolean           @default(false)
  createdAt DateTime          @default(now())

  @@index([userId, read]) // Composite index for user's unread notifications
  @@index([createdAt]) // Index for notification history
}

model Appointment {
  id            Int      @id @default(autoincrement())
  property      Property @relation(fields: [propertyId], references: [id])
  propertyId    Int
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  tenantId      Int
  scheduledTime DateTime
  status        AppointmentStatus // e.g., Scheduled, Completed, Cancelled
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([scheduledTime]) // Index for date-based queries
  @@index([status]) // Index for filtering by status
  @@index([tenantId, status]) // Composite index for tenant's appointments with status
}

model Report {
  id            Int      @id @default(autoincrement())
  title         String
  description   String
  generatedBy   User     @relation(fields: [generatedById], references: [id])
  generatedById Int
  data          Json
  createdAt     DateTime @default(now())
}

model CalendarSync {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  provider     CalendarProvider // e.g., Google Calendar, Outlook, etc.
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
